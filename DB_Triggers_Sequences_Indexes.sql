CREATE SEQUENCE SEQ_IDKORISNIK
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER KORISNIK_PK_TRIGGER
BEFORE INSERT
ON KORISNIK
FOR EACH ROW
BEGIN
 SELECT Seq_IDKORISNIK.NEXTVAL
 INTO :NEW.ID
 FROM SYS.DUAL;
END KORISNIK_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDPREDTRG
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER PREDMETTRGOVINE_PK_TRIGGER
BEFORE INSERT
ON PREDMETTRGOVINE
FOR EACH ROW
BEGIN
 SELECT Seq_IDPREDTRG.NEXTVAL
 INTO :NEW.IDPREDTRG
 FROM SYS.DUAL;
END PREDMETTRGOVINE_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDZAHTRG
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER ZAHTEVZATRGOVINU_PK_TRIGGER
BEFORE INSERT
ON ZAHTEVZATRGOVINU
FOR EACH ROW
BEGIN
 SELECT Seq_IDZAHTRG.NEXTVAL
 INTO :NEW.IDZAHTRG
 FROM SYS.DUAL;
END ZAHTEVZATRGOVINU_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDTRG
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER TRGOVINA_PK_TRIGGER
BEFORE INSERT
ON TRGOVINA
FOR EACH ROW
BEGIN
 SELECT Seq_IDTRG.NEXTVAL
 INTO :NEW.IDTRG
 FROM SYS.DUAL;
END TRGOVINA_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDZELJTIM
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER ZELJATIMA_PK_TRIGGER
BEFORE INSERT
ON ZELJATIMA
FOR EACH ROW
BEGIN
 SELECT Seq_IDZELJTIM.NEXTVAL
 INTO :NEW.IDZELJTIM
 FROM SYS.DUAL;
END ZELJATIMA_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDPOZINT
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER POZIVNAINTERVJU_PK_TRIGGER
BEFORE INSERT
ON POZIVNAINTERVJU
FOR EACH ROW
BEGIN
 SELECT Seq_IDPOZINT.NEXTVAL
 INTO :NEW.IDPOZINT
 FROM SYS.DUAL;
END POZIVNAINTERVJU_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDINT
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER INTERVJU_PK_TRIGGER
BEFORE INSERT
ON INTERVJU
FOR EACH ROW
BEGIN
 SELECT Seq_IDINT.NEXTVAL
 INTO :NEW.IDINT
 FROM SYS.DUAL;
END INTERVJU_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDPOZTRNG
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER POZIVNATRENING_PK_TRIGGER
BEFORE INSERT
ON POZIVNATRENING
FOR EACH ROW
BEGIN
 SELECT Seq_IDPOZTRNG.NEXTVAL
 INTO :NEW.IDPOZTRNG
 FROM SYS.DUAL;
END POZIVNATRENING_PK_TRIGGER;

CREATE SEQUENCE SEQ_IDTRNG
INCREMENT BY 1
START WITH 1
NOCYCLE
CACHE 10;

CREATE OR REPLACE TRIGGER TRENING_PK_TRIGGER
BEFORE INSERT
ON TRENING
FOR EACH ROW
BEGIN
 SELECT Seq_IDTRNG.NEXTVAL
 INTO :NEW.IDTRNG
 FROM SYS.DUAL;
END TRENING_PK_TRIGGER;

CREATE OR REPLACE TRIGGER POZIVNAINTERVJU_ACCEPT_TR
BEFORE UPDATE OF STATUSPOZINT
ON POZIVNAINTERVJU
FOR EACH ROW
WHEN (NEW.STATUSPOZINT = 'AFFIRMED')
BEGIN
     INSERT INTO INTERVJU
     VALUES (0, :NEW.MESODRPOZINT, :NEW.DATVREPOZINT, '', :NEW.IDPOZINT, :NEW.IDREGRUT);
END POZIVNAINTERVJU_ACCEPT_TR;

CREATE OR REPLACE TRIGGER POZIVNATRENING_ACCEPT_TR
BEFORE UPDATE OF STATUSPOZTRNG
ON POZIVNATRENING
FOR EACH ROW
WHEN (NEW.STATUSPOZTRNG = 'AFFIRMED')
DECLARE
    tip_trng_id NUMBER(3) := 1;
BEGIN
     FOR TEMP IN (SELECT * FROM TIPTRENINGA) LOOP
        IF TEMP.NAZTIPTRNG = :NEW.NAZTIPTRNG THEN
            tip_trng_id := TEMP.IDTIPTRNG;
        END IF;
     END LOOP;

     INSERT INTO TRENING
     VALUES (SEQ_IDTRNG.NEXTVAL, :NEW.TRAJTRNG, :NEW.DATVREPOZTRNG, :NEW.MESODRPOZTRNG, '', tip_trng_id, :NEW.IDPOZTRNG);
END POZIVNATRENING_ACCEPT_TR;

CREATE OR REPLACE TRIGGER ZAHTEVZATRGOVINU_ACCEPT_TR
FOR UPDATE OF STATUSZAHTRG
ON ZAHTEVZATRGOVINU
COMPOUND TRIGGER

  TYPE ZahtIDTableType IS TABLE OF ZAHTEVZATRGOVINU.IDZAHTRG%TYPE;
  ZahtIDs ZahtIDTableType := ZahtIDTableType();

  BEFORE EACH ROW IS
  BEGIN
    IF :NEW.STATUSZAHTRG = 'ACCEPTED' THEN
      ZahtIDs.EXTEND;
      ZahtIDs(ZahtIDs.COUNT) := :OLD.IDZAHTRG;
    END IF;
  END BEFORE EACH ROW;

  AFTER STATEMENT IS
  BEGIN
    FOR i IN 1 .. ZahtIDs.COUNT LOOP
      FOR PREDMET IN (SELECT P.IDPREDTRG, P.TIPPREDTRG, P.IDPRAVA, P.IDIGRAC, P.IDZAHTRG, P.IDPIK
                      FROM PREDMETTRGOVINE P
                      WHERE P.IDZAHTRG = ZahtIDs(i)) LOOP

        FOR ZAHTEV IN (SELECT Z.IDZAHTRG
                       FROM ZAHTEVZATRGOVINU Z
                       JOIN PREDMETTRGOVINE P ON P.IDZAHTRG = Z.IDZAHTRG
                       WHERE Z.STATUSZAHTRG = 'IN_PROGRESS'
                         AND (P.IDIGRAC = PREDMET.IDIGRAC OR 
                              P.IDPIK = PREDMET.IDPIK OR 
                              P.IDPRAVA = PREDMET.IDPRAVA)) LOOP
            
          UPDATE ZAHTEVZATRGOVINU 
          SET STATUSZAHTRG = 'DECLINED', 
              RAZLOGODBIJ = 'Another trade proposal has been accepted'
          WHERE IDZAHTRG = ZAHTEV.IDZAHTRG;
        
        END LOOP;
      END LOOP;
    END LOOP;
  END AFTER STATEMENT;
END ZAHTEVZATRGOVINU_ACCEPT_TR;

CREATE INDEX predmettrgovine_idzahtrg_idx ON PREDMETTRGOVINE (IDZAHTRG);

CREATE INDEX predmettrgovine_idigrac_idx ON PREDMETTRGOVINE (IDIGRAC);

CREATE INDEX predmettrgovine_idpik_idx ON PREDMETTRGOVINE (IDPIK);

CREATE INDEX predmettrgovine_idprava_idx ON PREDMETTRGOVINE (IDPRAVA);

CREATE INDEX zahtevzatrgovinu_menadzeri_idx ON ZAHTEVZATRGOVINU (IDMENADZERPOS, IDMENADZERPRIM);

CREATE INDEX ugovor_idtim_idx ON UGOVOR (IDTIM);

CREATE INDEX igrac_nedodlistigr_idx ON IGRAC (NEDODLISTIGR);

CREATE INDEX pik_nedodlistpik_idx ON PIK (NEDODLISTPIK);

CREATE INDEX pravanaigraca_nedodlistprava_idx ON PRAVANAIGRACA (NEDODLISTPRAVA);
